var fs = require('fs');
var path = require('path');
var fse = require('fs-extra');
var OAuth = require('@ali/buc-oauth');
var prompt = require('prompt');
var BUC = require('./src/buc.json');

var HOME = process.env.HOME || process.env.HOMEPATH || process.env.USERPROFILE;
var OR_PATH = path.join(HOME, '.or/');

var	Login = function () {
	var buc_file = path.join(OR_PATH, 'buc');
	this.buc_file = buc_file;
	fse.ensureFileSync(buc_file);

	this.buc = fs.readFileSync(buc_file, {encoding:'utf8'});
	this.oauthClient = new OAuth({
		appcode: BUC.appcode,
		ssoUrl: BUC.ssourl
	});

};

Login.prototype = {
	getLoginInfo: function () {
		try {
			var bucObj = JSON.parse(this.buc);
			return bucObj;
		} catch(e) {
			// err
		}
		return null;
	},
	login: function (cb) {
		var me = this;
		this._doLogin(function (buc) {
			//console.log(buc);
			me.buc = buc;
			fs.writeFileSync(me.buc_file, JSON.stringify(buc));
			cb && cb(buc);
		});
	},
	refreshAccessToken: function (cb) {
		var me = this;
		try {
			var bucObj = JSON.parse(this.buc);
			var oauth = bucObj.oauth;
			this.oauthClient.refreshAccessToken(oauth, function (err, res) {
				oauth.accessToken = res.accessToken;
				oauth.refreshToken = res.refreshToken;
				bucObj.oauth = oauth;
				fs.writeFileSync(me.buc_file, JSON.stringify(bucObj));
				cb && cb(bucObj);
			});
		}catch(e) {
			this.login(cb)
		}
	},
	_doLogin: function (cb) {
		var me = this;
		var schema = {
		    properties: {
		      name: {
		      	description: '[域账号]',
		        required: true
		      },
		      password: {
		      	description: '[域账号密码]',
		      	required: true,
		        hidden: true
		      }
		    }
		  };
		prompt.start();

		prompt.get(schema, function (err, result) {
			me.oauthClient.login(result.name, result.password, function (err, res) {
				cb && cb(res);
			})
		});
	}
}


var $ = new Login();
// var buc = $.getLoginInfo();
// if (!buc) {
// 	$.login(function (buc) {
// 		console.log(buc)
// 	});
// }

module.exports = $;
