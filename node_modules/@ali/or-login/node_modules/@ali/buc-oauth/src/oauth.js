/**!
 * buc-client - lib/oauth_client.js
 *
 * Copyright(c) Alibaba Group Holding Limited.
 * Es5 version of [buc_client](http://web.npm.alibaba-inc.com/package/buc-client) by <suqian.yf>
 *
 * Authors:
 *  <suqian.yf@alipay.com> (http://fengmk2.github.com)
 *  <cenan.chr@alibaba-inc.com> 
 */

'use strict';

/**
 * Module dependencies.
 */

var debug = require('debug')('buc-client:oauth_client');
var assert = require('assert');
var urllib = require('urllib');
var ms = require('humanize-ms');
var bucUtils = require('buc-utils');
var ERROR_CODES = require('./error_codes');

module.exports = OAuthClient;

// API document: http://docs.alibaba-inc.com:8090/pages/viewpage.action?pageId=107288804
function OAuthClient(options) {
  if (!(this instanceof OAuthClient)) {
    return new OAuthClient(options);
  }

  assert(options.appcode, 'options.appcode 必须设置，若没有，请联系 BUC 管理员申请');
  options.apptype = options.apptype || 'app';
  options.ssoURL = options.ssoURL || options.ssoUrl || 'https://login-test.alibaba-inc.com';
  options.timeout = ms(options.timeout || '5s');
  this.options = options;
}

var proto = OAuthClient.prototype;


// // oauth 登录
// // 返回成功登录的用户信息
// //
// // name: 用户名
// // password: 密码
proto.login = function (name, password, cb) {
  var me = this;
  me.getAuthCode({
    name: name,
    password: password
  }, function (err, authcode) { 
    me.getAccessToken({
      authcode: authcode
    }, function (err, result) { 
      me.validateAccessToken({
        accessToken: result.accessToken
      }, function (err, oauth) {
        var email = oauth.Email;
        if (!email) {
          if (oauth.DomainUser) {
            email = oauth.DomainUser.split('\\')[1] + '@alibaba-inc.com';
          } else {
            email = name + '@alibaba-inc.com';
          }
        }
        var user = bucUtils.formatUser({
          id: 0,
          emailPrefix: email.split('@')[0],
          emailAddr: email,
          empId: oauth.WorkId,
          nickNameCn: oauth.DisplayName,
        });
        user.oauth = oauth;
        cb && cb(err, user);
      })
    })
  })
};

// // 根据RefreshToken更换新的accessToken和RefreshToken（推荐，调用方使用，替代refresh方法）
// //
// // accessToken 有效的AccessToken并且能够与RefreshToken对应
// // refreshToken RefreshToken用于延长AccessToken的时间，延长的有效期为3天
proto.refreshAccessToken = function (oauth, cb) {
  var me = this;
  this._request('/renewAccessToken.do', {
    method: 'post',
    data: {
      accesstoken: oauth.accessToken,
      refreshtoken: oauth.refreshToken,
    }
  },
    function (err, result) {
      var ret = me._formatOAuth(result);
      cb && cb(err, ret);
    });
}

// // 禁用AccessToken。安全保护，主要用于类似手机客户端已登录，且手机丢失的情况下，应用方主动失效，也可联系BUC团队进行失效处理。（调用方使用）
// //
// // accessToken 有效的AccessToken并且能够与RefreshToken对应
// // refreshToken 与AccessToken对应的值
proto.disableAccessToken = function (oauth, cb) {
  var me = this;
  this._request('/disableAccessToken.do', {
    method: 'post',
    data: {
      appcode: this.options.appcode,
      accesstoken: oauth.accessToken,
      refreshtoken: oauth.refreshToken,
    }
  },
    function (err, result) {
      cb && cb(err, result.IsSuccess);
    });
}

// // 根据accessToken获取免登token，用于免登到web应用(需要联系BUC管理员授权)
// //
// // appcode 与accesstoken和refreshtoken所对应的值
// // accessToken 有效的AccessToken并且能够与RefreshToken对应
// // resource 访问资源地址,此参数可以为空
// //
// // 获取到ssoToken值后，访问应用url时追加SSO_TICKET参数，例如： http://work.alibaba-inc.com?SSO_TICKET=XXXXXXXXX
// // 注意：如果需要使用此功能，被访问的web应用必须要在web.xml中配置APP_CODE参数
proto.getSSOToken = function (data, cb) {
  var me = this;
  this._request('/getSSOToken.do', {
    method: 'post',
    data: {
      appcode: this.options.appcode,
      accesstoken: data.accessToken,
      resource: data.resource,
    }
  },
    function (err, result) {
      cb && cb(err, result.ssoToken);
    });
};

proto._formatOAuth = function (oauth) {
  if (oauth.accessToken === undefined) {
    oauth.accessToken = oauth.AccessToken;
  }
  if (oauth.refreshToken === undefined) {
    oauth.refreshToken = oauth.RefreshToken;
  }
  return oauth;
};


// // 获取AuthCode（调用方使用）
// //
// // name  用户域帐号 例如taobao-hz\xxxxx.xx或者xxxx.xx
// // password  用户密码
// // authtype  值为user时为用户验证; 为system时为系统验证, 为system时不验证用户名、密码
proto.getAuthCode = function (data, cb) {
  data.appcode = this.options.appcode;
  if (data.name) {
    data.authtype = 'user';
  } else {
    data.authtype = 'system';
  }
  var me = this;
  this._request('/login.do', {
    method: 'post',
    data: data
  }, function (err,result) {
    cb && cb(err, result.ArkAuthCode);
  });
};

// // 根据AuthCode置换AccessToken（调用方使用）
// //
// // authcode 根据login.do获取的有效authcode
// // clienttype 调用方的类型。传递 client 会返回AccessToken和RefreshToken，不传仅返回AccessToken。
// //   AccessToken有效期为一天，RefreshToken长期有效
proto.getAccessToken = function (data, cb) {
  data.appcode = this.options.appcode;
  var me = this;
  this._request('/getAccessToken.do', {
    method: 'post',
    data: data
  }, function (err,result) {
    cb && cb(err, me._formatOAuth(result));
  });
};

// // 提供AccessToken的校验服务，返回登录用户信息（接口提供方使用）
// //
// // type 用于区分是Api授权调用还是仅仅登录调用,如果是Api保护校验传入api，如果是客户端登录则传入app
// // appcode 签发给应用的AppCode。如果type是app，则与login.do的appcode一样；
// //   如果是api授权，type是api，则值为api提供方的appcode，与调用方的不一样
// // accessToken 根据getAccessToken.do获取的有效的AccessToken
proto.validateAccessToken = function (data, cb) {
  var me = this;
  this._request('/validateAccessToken.do', {
    method: 'post',
    data: {
      accesstoken: data.accessToken,
      appcode: this.options.appcode,
      type: this.options.apptype
    }
  },
    function (err, result) {
      if (result.DisplayName) {
        result.DisplayName = new Buffer(result.DisplayName.trim(), 'base64').toString();
      }
      cb && cb(err, me._formatOAuth(result));
    });
};

proto._request = function (pathname, args, cb) {
  var url = this.options.ssoURL + '/authorize' + pathname;
  args = args || {};
  args.dataType = 'json';

  urllib.requestThunk(url, args)(function (err, res) {
    var result = res.data || {};

    var errorCode = result.ErrorCode || result.errorCode;
    var isSuccess = result.IsSuccess === undefined ? result.success : result.IsSuccess;
    if (isSuccess === false || errorCode > 0) {
      var message = ERROR_CODES[errorCode] || ('Unknow error, status: ' + res.status);
      message += ' (ErrorCode: ' + errorCode + ')';
      var err = new Error(message);
      err.name = 'BucOAuthRequestError';
      err.response = result;
      throw err;
    }

    cb && cb(err, result);
  });
};
